

const string MiscString[] = {"MOD             ","  ON            ","  OFF           ","    VERSA5 DOGS ","    DECIDER XII ","    GPC Slot:   ","     Enabled    ","    Disabled    ","Mod Toggle On/Off"};
const string ModToggle[] = {"", 
                   

" ASSIST TIMES    "," AIM ASSIST HIP  "," ANTI RECOIL     "," HEAD ASSIST     "," AUTO FISH       "," AUTO RUN        ",
" BATTS SH SWAP   "," BUILD BOOST     "," AUTO SLIDE      "," CROUCH ON L2    "," CUSTOM TRIGGER  "," DAMS PUMP SMG   ",
" DROPSHOT        "," DYNAMIC DEADZ   "," EDIT ASSIST     "," EDIT CANCEL     "," LINEAR SENS     "," ONE FING RESET  ",
" PERFECT ACC     "," PROGRESSION AR  "," PUMP BUILD      "," RAMP RUSH       "," RAPID FIRE      "," REDUCER         ",
" SMART TRACK     "," STATIC DEADZ    "," STRAFE          "," TOP EDIT        "," VERSA SENS      "," VERSA TOUCH     ",
" iPICKAXE        "," OH SHIT         "," TRUMP WALL      "," TPAD RAMP RUSH  "," PRO PICK        "," PRO PICK TWO    ",
" TPAD RESET      "," TPAD PUMP BUILD "," TWO FINGER RESET"," SHOTGUN RESYNC  "};

int ModSW,
AimAssistTimes = On  ,AimAssistHip = Off ,AntiRecoil = Off   ,HeadAssist = Off   ,AutoFish = Off      ,AutoRun = Off      ,
BattsShootSwap = Off ,BuildBST = Off     ,AutoSlide = Off    ,CrouchOnL2 = Off   ,CustomTrig = Off    ,DAMsPumpSmg = Off  ,
DropShot = 1         ,DynamicDZ = Off    ,EditAssist = On    ,EditCancel = On    ,LinearSens = Off    ,OneFingerReset = On,
PerfAcc = On         ,ProgressionAR = Off,PumpBuild = Off    ,RampRush = Off     ,RapidFire = On      ,Reducer = On       ,
VersaTrack = On      ,StaticDZ = Off     ,Strafe = Off       ,TopEdit = On       ,VersaSens = On      ,VersaTMods = On    ,
iPickaxe = Off       ,OhShit = On        ,TrumpWall = On     ,TpadRampRush = On  ,ProPick = On        ,ProPick2 = Off     ,
TpadFastReset = On   ,TpadPumpBuild = On ,TwoFingerReset= Off,ShotgunReSync = On;

int AimAssist_EXP = Off; int AimAssist_LIN = Off; int AATimed = Off; int HeadHipAssist = Off;

 const string ModValue[] = {   "",
 /*|   001   |*/"  VM_CONTROL        ",/*|   002   |*/"  BTN_UPDATE_INTV   ",/*|   003   |*/"  LAG_TIME_INTV     ",/*|   004   |*/"  LIN ASSIST STR    ",/*|   005   |*/"  EXPO ASSIST_STR   ",
 /*|   006   |*/"  AIM_ASSIST_INC    ",/*|   007   |*/"  BUMPER RELEASE T  ",/*|   008   |*/"  CROUCH_SHOT_T     ",/*|   009   |*/"  EDIT_CAN_DELAY    ",/*|   010   |*/"  EDIT_DELAY_ONE    ",
 /*|   011   |*/"  EDIT_DELAY_TWO    ",/*|   012   |*/"  ANTI_RECOIL       ",/*|   013   |*/"  PROG_REC_START    ",/*|   014   |*/"  PROG_REC_END      ",/*|   015   |*/"  DROP_DUB_TAP_T    ",
 /*|   016   |*/"  DROP_SHOT_DN_T    ",/*|   017   |*/"  DROP_SHOT_UP_T    ",/*|   018   |*/"  PERF_ACC TIME     ",/*|   019   |*/"  PICK_PRESS_TIME   ",/*|   020   |*/"  PICK_REL_TIME     ",
 /*|   021   |*/"  PUMP_BUILD_T      ",/*|   022   |*/"  RAMP_RUSH_TIME    ",/*|   023   |*/"  RAPID_FIRE_PRES   ",/*|   024   |*/"  RAPID_FIRE_WAIT   ",/*|   025   |*/"  SHOOT_SWAP_TIME   ",
 /*|   026   |*/"  WALL_TAKE_ONE     ",/*|   027   |*/"  WALL_TAKE_TWO     ",/*|   028   |*/"  BUILD SYNC TIME   "};

 int ModDigit,
 /*|   001   |*/  VMControlT     =  -4,/*|   002   |*/  UpdateT        =  30,/*|   003   |*/  LagCounterT    =   0,/*|   004   |*/  LINAssistStr   =  17,/*|   005   |*/  EXPOAssistStr  =  27,
 /*|   006   |*/  AimAssistInc   =   5,/*|   007   |*/  BumperReleaseT =  50,/*|   008   |*/  CrouchShotT    =  40,/*|   009   |*/  EditCancelT    =  30,/*|   010   |*/  EditDelT       =  30,
 /*|   011   |*/  EditDelT2      =  30,/*|   012   |*/  LegacyART      =  50,/*|   013   |*/  ArProgStartT   =  40,/*|   014   |*/  ArProgEndT     =  35,/*|   015   |*/  DropDubTapT    =  80,
 /*|   016   |*/  DropUpT        =  40,/*|   017   |*/  DropDnT        =  80,/*|   018   |*/  PerfAccT       = 200,/*|   019   |*/  PickaxePressT  =  40,/*|   020   |*/  PickaxeRelT    =  90,
 /*|   021   |*/  PumpBuildT     =  70,/*|   022   |*/  RampRushT      = 200,/*|   023   |*/  RapidPressT    =  20,/*|   024   |*/  RapidHoldT     =  20,/*|   025   |*/  BattsSwapT     =  50,
 /*|   026   |*/  WallTakeT      =  40,/*|   027   |*/  WallTakeT2     =  80,/*|   028   |*/  BuildSyncT   = 10000;

const int16
ModDigitMin [] = { 0,
 /*|   Upd   |*/  -9,	/*|   Lag   |*/  10,	/*|   LIN   |*/   0,	/*|   EXP   |*/   0,	/*|   Aim   |*/   0,	/*|   Bum   |*/  25,	/*|   Cro   |*/  20,	/*|   Edi   |*/  20,	/*|   Edi   |*/  20,
 /*|   Edi   |*/  20,	/*|   Leg   |*/   0,	/*|   ArP   |*/   0,	/*|   ArP   |*/   0,	/*|   Dro   |*/   0,	/*|   Dro   |*/   0,	/*|   Dro   |*/   0,	/*|   Per   |*/  25,	/*|   Pic   |*/  25,
 /*|   Pic   |*/  25,	/*|   Pum   |*/  25,	/*|   Ram   |*/  25,	/*|   Rap   |*/  25,	/*|   Rap   |*/  25,	/*|   Bat   |*/  25,	/*|   Wal   |*/  25,	/*|   Wal   |*/  25,	/*|   Bui   |*/  1000};

 const int16
 ModDigitMax [] = { 0,
  /*|   Upd   |*/  20,	/*|   Lag   |*/ 250,	/*|   LIN   |*/ 250,	/*|   EXP   |*/ 250,	/*|   Aim   |*/ 250,	/*|   Bum   |*/ 250,	/*|   Cro   |*/ 250,	/*|   Edi   |*/ 250,	/*|   Edi   |*/ 250,
  /*|   Edi   |*/ 250,	/*|   Leg   |*/ 250,	/*|   ArP   |*/ 250,	/*|   ArP   |*/ 250,	/*|   Dro   |*/ 250,	/*|   Dro   |*/ 250,	/*|   Dro   |*/ 250,	/*|   Per   |*/ 250,	/*|   Pic   |*/ 250,
  /*|   Pic   |*/ 250,	/*|   Pum   |*/ 250,	/*|   Ram   |*/ 250,	/*|   Rap   |*/ 250,	/*|   Rap   |*/ 250,	/*|   Bat   |*/ 250,	/*|   Wal   |*/ 250,	/*|   Wal   |*/ 250,	/*|   Bui   |*/ 32000};
  
int PowerTimes  = 2;    int AATime = 2000; int HeadStep = 2;  int HeadMax  = 30;   
  
  
const string SensToggle[] = {"", " COMBAT SENS ", " BUILD SENS  "};
int SensTog, CombatSens = On, BuildSens = On;
const string SensValue[] = {"", "    GENERAL_DZ     ","    AIM_DZ      ","    BUILD_DZ      ","    EDIT_DZ    "};
int SensDigit,  GenDeadzone   =  8    ,AimDeadzone   =  8    ,   BuildDeadzone =  5    ,  EditDeadzone  =  3    ;
define rs = 2; define ls = 4;

const int16 ModIncrement[] = {0, 1};
const int16 SensDigitMin[] = {0, 0, 0,0 };
const int16 SensDigitMax[] = {20, 20, 20,20};
const int16 SensDigitInc[] = {0, 1, 1,1,1};

const string AimAssistL = " Aim Assist      "; const string AntiRecoilL = " AntiRecoil      "; const string AutoFishL = " Auto Fish       ";
const string KillSWL = " KillSW          ";    const string RapidFireL = " Rapid Fire Mod  ";  const string ShootSwapL = " ShootSwap       ";
const string ProPickL = " ProPick         ";

define TimeoutLimit = 2,TimeoutLimitM = 20000,IndexMinSW = 1,IndexMaxSW = 47,IndexMinValues = 1,IndexMaxValues = 26,IndexSensMinSW = 1, IndexSensMaxSW = 4,IndexSensMinValues = 1,IndexSensMaxValues = 4;
int ScrollX = 64,ScrollY = 50,ScrollSpeed = 70,ScrollDelay = 950,Number = 1,Slot = 20000;

int ScrollTime, ScrollWait, ScrollLine, ScrollIndex, ScrollChar, Position, Update, MenuTimeout, Count, MainMenu, ModIndex, MenuValues, SensValues, MenuSW, SensSW, menuVar, NumX, NumY, NumS, Clear, BlockButtonXI;
int ToggleT, ToggleTime, ToggleName, Modled, vibrateA, vibrateB; int Actual_Rx, Actual_Ry, Last_Rx, Last_Ry, returnAxis; int rtime[21], triggerRelease, BumperTog, DaM, Trigger, BattsShootSwapVar, mode_message_timeout;
int KillSwitch, AimAssistMod, AntiRecoilMod, AutoFishMod, ShootSwapMod, ProPickMod, RapidFMod; int ActiveSensH, ActiveSensV, ActiveMZ, ActiveDZL, ActiveDZR, DZCheck;  int inc = 1, dec, color[3];
int trackPickaxe = TRUE, trackBuildP, trackBuild, trackEdit, trackCombat, MenuReSync; int PressedMenu, PickaxeVar, PickBuildVar, BuildVar, EditVar, CombatVar, UpVar, modetracking; int BuildTrack, BuildCount, BuildPro;
int autorunSW, cmb_counter, ramprushVar, dropVar, axe, walltake, dynabuseT, confirmT, confirmTSW, ohshit, jtime, JumpVar, Trump, crouchonL2dn, PickaxeSW; int ediT, ediT2, etimer, autoEditReset, editcount;
int angle, cos_angle, sin_angle, actual_X, actual_Y, actual_Magnitude, max_Magnitude, Radius, Angle, power, Ypower, Xpower, Power, CountPower, AxisXY, DoGzARVal, DoGzProgressionV2, DoGzARPos = 1, AR_Value;
int changemenupress, check_fvar, INDEXER; int mvt_direction, rx_drift, ry_drift, lx_drift, ly_drift, drift_calib; int update_timer, checkRX, checkRY, checkLX, checkLY, L_RX, L_RY; int AAT,Axis,Head;
int TESTCOMBO;

define ProgARInvert = Off; define ProgARHip = Off; int ReloadReset = Off; int currentX,currentY; int quickpick;

define ls_stick_sens = 2;
define ls_stick_add = 2;
define rs_stick_sens = 0;
define rs_stick_add = 2;
define TimeBase = 4;
int RefreshRate = TimeBase * 10;


int return_val
define MaxDrift = 20;

init
{
	color = 255; //LED RACE BY DAM WHEN KILLSW IS ACTIVE
}
/*🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 */

//	𝐌𝐀𝐈𝐍 𝐒𝐄𝐂𝐓𝐈𝐎𝐍
main
{
	
          vm_tctrl(VMControlT);
          block_rumble();
          dpadcorrection();
          check_jump_time();
          
          set_val(TRACE_1,BuildCount);
          set_val(TRACE_2,trackBuild);
          

              if (g(LS))
          {
                    BlockButtonXI = LS;
          }

          Sensitivity_Alignent()
              mvt_direction = 1;

          if (drift_calib)
          {
                    rx_drift = max(rx_drift, abs(get_ival(aimX)) + 2);
                    ry_drift = max(ry_drift, abs(get_ival(aimY)) + 2);

                    lx_drift = max(lx_drift, abs(get_ival(LX)) + 2);
                    ly_drift = max(ly_drift, abs(get_ival(LY)) + 2);

                    rx_drift = min(rx_drift, MaxDrift);
                    ry_drift = min(ry_drift, MaxDrift);

                    lx_drift = min(lx_drift, MaxDrift);
                    ly_drift = min(ly_drift, MaxDrift);

                    drift_calib--;

                    rx_drift = max(rx_drift, ry_drift);
                    lx_drift = max(lx_drift, ly_drift);
          }

          checkRX = get_ival(aimX);
          checkRY = get_ival(aimY);

          if (get_val(Ads) > 50 || get_val(Fire) > 50)
          {
                    if (update_timer >= RefreshRate)
                    {
                              block(aimX, RefreshRate);
                              block(aimY, RefreshRate);

                              return_val = get_mvt_direction(checkRX, L_RX);

                              if (return_val != 0)
                                        mvt_direction = return_val;

                              update_timer = 0;

                              L_RX = checkRX;
                              L_RY = checkRY;
                    }
          }
          update_timer = 0;
          update_timer = RefreshRate;

          set_val(aimX, checkRX);
          set_val(aimY, checkRY);

          drift_calib = 100;

          //displ(PressedMenu, PickaxeVar, PickBuildVar, check_dz_trace, EditVar, ohshit);
          //  set_val(TRACE_1,check_dz_trace);

          toggleX(KillSWH, KillSWP, KillSwitch, KillSwitch[0]);

          if (!KillSwitch)
          {

                    //	𝐌𝐎𝐃 𝐓𝐎𝐆𝐆𝐋𝐄𝐒

                    if (g(AssistH) && p(AssistP) && !g(Crouch))
                    {
                              BlockButtonXI = AssistP;
                              AimAssistMod = !AimAssistMod;
                              ToggleName = On;
                              Toggle(AimAssistMod, AimAssistL[0]);
                    }

                    if (g(AntiRecH) && p(AntiRecP))
                    {
                              BlockButtonXI = AntiRecP;
                              AntiRecoilMod = !AntiRecoilMod;
                              ToggleName = On;
                              Toggle(AntiRecoilMod, AntiRecoilL[0]);
                    }

                    if (g(AutoFishH) && p(AutoFishP))
                    {
                              BlockButtonXI = AutoFishP;
                              AutoFishMod = !AutoFishMod;
                              ToggleName = On;
                              Toggle(AutoFishMod, AutoFishL[0]);
                    }

                    if (g(RapidFModH) && p(RapidFModP))
                    {
                              BlockButtonXI = RapidFModP;
                              RapidFMod = !RapidFMod;
                              ToggleName = On;
                              Toggle(RapidFMod, RapidFireL[0]);
                    }

                    if (g(ShootSwapH) && p(ShootSwapP) && !g(Crouch))
                    {
                              BlockButtonXI = ShootSwapP;
                              ShootSwapMod = !ShootSwapMod;
                              ToggleName = On;
                              Toggle(ShootSwapMod, ShootSwapL[1]);
                    }

                    if (g(PWeapon) && g(Down) > 800)
                    {
                              BlockButtonXI = Down;
                              ProPickMod = !ProPickMod ToggleName = On;
                              Toggle(ProPickMod, ProPickL[0]);
                    }

                    if (g(Ads) && g(Crouch))
                    {
                              if (event_press(Up))
                              {
                                        DropShot = clamp(DropShot + 1, 0, 2);
                                        vibrateA = On;
                                        combo_run(Rumble1);
                              }
                              if (event_press(Down))
                              {
                                        DropShot = clamp(DropShot - 1, 0, 2);
                                        vibrateB = On;
                                        combo_run(Rumble1);
                              }
                    }

                    //	𝐋𝐄𝐃 𝐏𝐑𝐎𝐓𝐎𝐂𝐎𝐋
                    if (VersaTrack)
                    {
                              smartTrack();
                    }

                    if (VersaSens)
                    {
                              versa_sens();
                    }

                    if (VersaTMods)
                    {
                              tpad_calc();

                              if (OhShit)
                              {
                                        if ((trackBuild && Zone1 == 2 && ZoneTime < 250) || (trackBuildP && Zone1 == 2 && ZoneTime < 250))
                                        {
                                                  combo_run(FirstSlotSyncCMB_B);
                                                  ohshit = 1;
                                                  BuildVar = 0;
                                        } //BuildM On
                                        else if (trackCombat && Zone1 == 2 && ZoneTime < 250)
                                        {
                                                  combo_run(FirstSlotSyncCMB);
                                                  ohshit = 2;
                                                  BuildVar = 0;
                                        } //CombatM On
                                        else if (trackPickaxe && Zone1 == 2 && ZoneTime < 250)
                                        {
                                                  combo_run(FirstSlotSyncCMB_P);
                                                  ohshit = 3;
                                                  BuildVar = 0;
                                        } //PickaxeM On
                              }

                              if (TrumpWall)
                              {
                                        if (Zone1 == 4)
                                        {
                                                  if (p(Reload))
                                                  {
                                                            Trump = clamp(Trump + 1, 0, 1);
                                                  }
                                                  if (Trump == 1)
                                                  {
                                                            combo_run(TrumpBuild);
                                                  }
                                                  if (Trump == 2)
                                                  {
                                                            combo_run(TrumpWall);
                                                  }
                                        }
                                        if (Trump == 2 && r(Reload))
                                        {
                                                  combo_stop(TrumpBuild);
                                                  combo_stop(TrumpWall);
                                                  Trump = Off;
                                                  combo_run(PressBuild);
                                        }
                              }

                              if (TpadRampRush)
                              {
                                        if (Zone1 == 6)
                                        {
                                                  if (trackBuild || trackBuildP)
                                                            combo_run(RampRushStart);
                                        }
                              }

                              if (ProPick)
                              {
                                        if (ZoneP)
                                        {
                                                  if (ZoneP == 1)
                                                  {
                                                            PickaxeSW = On;
                                                  }
                                                  BlockButton(NWeapon);

                                                  if (PickaxeSW && !ProPickMod)
                                                  {
                                                            combo_run(ProPickCMB);
                                                            axe = Off;
                                                            BuildVar = 0;
                                                  }
                                                  if (PickaxeSW)
                                                  {
                                                            switch_modes(1, 0, 0, 0, 0, 0, 1);
                                                  }
                                                  PickaxeSW = On;
                                        }
                              }

                              if (ProPick2)
                              {

                                        if (ps4_touchpad(P1))
                                        {
                                                  if (Zone1 == 1)
                                                  {
                                                            if (g(Fire))
                                                            {
                                                                      set_val(Pickaxe, (get_ival(Fire)));
                                                                      quickpick = 1;
                                                            }
                                                  }
                                                  BlockButton(Fire);
                                        }

                                        if (r(Fire))
                                        {
                                                  quickpick = Off;
                                        }
                              }

                              if (TpadFastReset)
                              {
                              }

                              if (TpadPumpBuild)
                              {
                                        if (Zone4 == 1 && !g(Ads) && ZoneTime < 50)
                                        {
                                        }
                                        if (Zone4 == 2 && g(Ads))
                                        {
                                                  switch_modes(0, 0, 0, 0, 1, 0, 5);
                                                  combo_run(PumpBuild1);
                                                  combo_stop(FastReset);
                                        }
                              }

                              if (TwoFingerReset)
                              {
                                        if (Zone7 == 2)
                                        {
                                                  combo_run(FastReset);
                                        }
                              }

                    } // END VersaTMods

                    if (mode_message_timeout && !MainMenu)
                    {
                              mode_message_timeout -= get_rtime();
                              if (mode_message_timeout <= 0)
                              {
                                        modemessage_timeout();
                              }
                    }

                    if (CustomTrig)
                    {
                              deadzone(Ads, Fire, 60, 100);
                    }

                    if (AutoSlide)
                    {
                              if (Zone6 == 1)
                              {
                                        combo_run(Slide);
                              }
                              if (combo_running(Slide))
                              {
                                        combo_run(Forward);
                              }
                    }

                    if (AutoRun)
                    {
                              if (g(Up) && get_ptime(Up) > 300)
                              {
                                        autorunSW = !autorunSW;
                              }
                              if (autorunSW == 1)
                              {
                                        s(LY, -100);
                              }

                              if (p(PWeapon) || p(NWeapon) || p(Edit) || p(Build))
                              //if((isqrt(pow(abs(get_ival(LX)),2) + pow(abs(get_ival(LY)),2)) >= 95))
                              {
                                        autorunSW = Off;
                              }
                    }



                    if (PerfAcc)
                    {
                              if (trackCombat && PerfAcc && get_ival(PerfAccH) && get_val(PerfAccP))
                              {
                                        switch_modes(0, 0, 0, 0, 1, 0, 5);
                                        s(PerfAccP, 0);
                                        s(LX, 0);
                                        combo_run(PerfectAccuracy);
                              }
                              else if (trackCombat && PerfAcc && get_ival(PerfAccH) && get_val(PerfAccP))
                              {
                                        switch_modes(0, 0, 0, 0, 1, 0, 5);
                                        s(PerfAccP, 0);
                                        s(LX, 0);
                                        combo_run(PerfectAccuracy);
                              }
                              else
                              {
                                        combo_stop(PerfectAccuracy);
                              }
                    }

                    if (iPickaxe)
                    {
                              if (p(Pickaxe))
                              {
                                        axe = On;
                              }
                              if (axe)
                              {

                                        if (event_press(Build) || event_press(Ads) || event_press(NWeapon) || event_press(PWeapon))
                                        {
                                                  axe = Off;
                                        }
                                        if (event_release(Fire))
                                        {
                                                  combo_run(Pickaxe);
                                        }
                              }
                    }

                    if (EditAssist)
                    {
                              if (g(EAssist) && !Zone1)
                              {
                                        EditAssist();
                              }
                              if (g(EAssist) && Zone1 >= 1)
                              {
                                        ediT = Off;
                              }
                              if (r(EAssist))
                              {
                                        combo_run(Confirm);
                                        ediT = Off;
                                        ediT2 = Off;
                              }
                    } //END EDIT ASSIST

                    if (OneFingerReset)
                    {
                              if (Zone4 == 1 && !g(Ads) && ZoneTime < 50)
                              {
                                        combo_run(FastReset);
                              }
                    } //END ONE FINGER RESET

                    if (ReloadReset)
                    {
                              if (g(Reload))
                              {
                                        BlockButtonXI = Reload;
                                        combo_run(FastReset);
                              }
                    }

                    if (EditCancel)
                    {
                              if (Zone1 == 3)
                              {
                                        EditAssistCancel();
                              }
                    } // END EDIT CANCEL

                    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
                    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

                    if (trackBuildP)
                    {

                              BuildCount = BuildCount + get_rtime();

                              if (event_press(Pickaxe) || event_press(Up) || BuildCount == BuildSyncT)
                              {
                                        BuildCount = Off;
                                        combo_run(FirstSlotSyncCMB);
                              }

                              if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall))
                                        BuildCount = Off;

                    } // 🔚END BUILDMODE

                    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
                    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

                    if (trackBuild)
                    {
                              if (BuildVar >= 1)
                              {
                                        BuildCount = BuildCount + get_rtime();

                                        if (BuildCount == BuildSyncT)
                                        {
                                                  BuildCount = Off;
                                                  combo_run(FirstSlotSyncCMB);
                                        }

                                        if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall))
                                                  BuildCount = Off;
                              }

                    } // 🔚END BUILDMODE

                    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
                    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

                    if (trackPickaxe)
                    {
                              if (g(Fire) && p(Ads))
                              {
                                        s(Ads, 0);
                                        axe = Off;
                                        WallTakeT = 1;
                              }
                              if (WallTakeT && r(Fire))
                              {
                                        s(Fire, 0);
                                        combo_run(WallTake);
                              }
                              if (walltake == 1)
                              {
                                        axe = Off;
                              }
                              if (!trackPickaxe)
                              {
                                        walltake = Off;
                              }

                    } // 🔚END PICKAXEMODE

                    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
                    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

                    if (trackCombat)
                    {
                              ramprushVar = 0; // THIS HITS BUILD AND SETS BASE FOR RAMP RUSH IF NOT IN BUILD MODE

                              if (!AimAssistMod)
                              {
                                        if (AimAssist_EXP)
                                        {

                                                  if (get_val(Ads) > 95)
                                                  {
                                                            combo_run(AimExpo);
                                                  }

                                                  if (abs(get_val(9)) > 19 || abs(get_val(10)) > 19)
                                                            combo_stop(AimExpo);
                                        }

                                        if (AimAssist_LIN)
                                        {

                                                  if (event_press(Ads))
                                                  {

                                                            Power = On;
                                                  }

                                                  else if (!get_ival(Ads) && event_press(Fire))
                                                  {

                                                            Power = On;
                                                  }

                                                  if (get_ival(Ads) || get_ival(Fire))
                                                  {

                                                            AxisXY = isqrt(abs(get_ival(aimX)) * abs(get_ival(aimX)) + abs(get_ival(aimY)) * abs(get_ival(aimY)));

                                                            if (AssistProfile == 1)

                                                                      AimAssist(LINAssistStr, AimAssistInc);
                                                  }
                                                  else
                                                  {

                                                            CountPower = 0;
                                                            power = Off;
                                                  }
                                        }

                                        if (AimAssistTimes)
                                        {

                                                  if (AATimed)
                                                  {

                                                            if (get_ival(Ads) && get_ptime(Ads) <= AATime || AimAssistHip && get_ival(Fire) && get_ptime(Fire) <= AATime)
                                                            {

                                                                      AimAssistTimes();
                                                            }
                                                  }
                                                  else if (get_ival(Ads) || AimAssistHip && get_ival(Fire))
                                                  {

                                                            AimAssistTimes();
                                                  }

                                                  if (!get_ival(Ads) && !get_ival(Fire))
                                                  {

                                                            AAT = 0;
                                                            Axis = 0;
                                                  }
                                        }

                                        if (HeadAssist)
                                        {

                                                  if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire))
                                                  {

                                                            if (abs(get_ival(aimY)) < HeadMax)
                                                            {

                                                                      Head += HeadStep;
                                                                      combo_run(HeadAssist);
                                                            }
                                                  }

                                                  if (!get_ival(Fire))
                                                            Head = 0;

                                                  if (Head >= HeadMax)
                                                            combo_stop(HeadAssist);
                                        }
                              }

                              if (!AntiRecoilMod)
                              {
                                        if (AntiRecoil)
                                        {
                                                  AR_Value = LegacyART;

                                                  if (get_ival(Ads) && get_ival(Fire))

                                                            LegacyAR()
                                        }

                                        if (ProgressionAR)
                                        {

                                                  if (((ProgARHip) && get_ival(Fire)) || ((!ProgARHip) && get_ival(Ads) && get_ival(Fire)))
                                                  {
                                                            DoGzProgressionV2 = On;
                                                            DoGzProgressionV2();
                                                  }

                                                  if (event_release(Ads) || event_release(Fire))
                                                  {
                                                            DoGzARVal = ArProgStartT;
                                                            DoGzProgressionV2 = Off;
                                                            DoGzARPos = On;
                                                  }
                                        }

                                        if ((get_ival(RecoilOTF)) && ((ProgressionAR)))
                                        {

                                                  if (event_press(RecoilDnP))
                                                  {
                                                            if (ProgressionAR)
                                                                      ArProgEndT += 1;

                                                            combo_run(Rumble);
                                                  }

                                                  if (event_press(RecoilUpP))
                                                  {
                                                            if (ProgressionAR)
                                                                      ArProgEndT -= 1;

                                                            combo_run(Rumble);
                                                  }

                                                  if ((ProgressionAR) && (ArProgEndT < ArProgStartT + 5 || ArProgEndT > 98))
                                                  {
                                                            DoGzARVal = ArProgStartT;
                                                            DoGzProgressionV2 = Off;
                                                            DoGzARPos = On;
                                                            ArProgEndT = ArProgStartT + 12;
                                                  }

                                                  set_val(RecoilUpP, 0);
                                                  set_val(RecoilDnP, 0);
                                        }
                              }

                              if (RapidFMod)
                              {
                                        if (g(Fire))
                                        {
                                                  combo_run(RapidFire);
                                        }
                                        else
                                        {
                                                  combo_stop(RapidFire);
                                        }
                              }

                              if (PumpBuild)
                              {
                                        if (g(PumpBuildH) && p(PumpBuildP))
                                        {
                                                  BlockButtonXI = PumpBuildP;
                                                  combo_run(PumpBuild1);
                                        }
                              } // 🔚 END PUMPBUILD

                              if (DropShot == 1)
                              {

                                        //if (DropShot && p(Fire) && get_brtime(Fire) < dropDbltap)
                                        if (DropShot && g(Fire) && p(Crouch))
                                        {
                                                  dropVar = 1;
                                        }
                                        if (dropVar)
                                        {
                                                  combo_run(DropShot);
                                                  if (event_release(Fire))
                                                            dropVar = 0;
                                        }
                              }

                              if (DropShot == 2)
                              {

                                        if (DropShot && g(Fire) && abs(g(LX)) <= 35 && abs(g(LY)) <= 35)
                                        {
                                                  combo_run(SmartShot);
                                                  combo_run(DropShot);
                                        }
                                        else
                                        {
                                                  combo_stop(SmartShot);
                                                  combo_stop(DropShot);
                                        }
                              }

                              if (CrouchOnL2)
                              {

                                        if (p(Ads) && !jtime)
                                        {
                                                  combo_run(CrouchOnL2CMB);
                                                  crouchonL2dn = On;
                                        }
                                        if (r(Ads) && crouchonL2dn)
                                        {
                                                  combo_run(CrouchOnL2CMB);
                                                  crouchonL2dn = Off;
                                        }
                              }

                              if (!ShootSwapMod)
                              {
                                        if (BattsShootSwap)
                                        {
                                                  //set_val(TRACE_1,BattsShootSwapVar);
                                                  if (g(PWeapon))
                                                  {
                                                            BattsShootSwapVar = Off;
                                                  }
                                                  if (r(Fire) && get_ptime(Fire) < 1150 && confirmT < 50)
                                                  {
                                                            BattsShootSwapVar = !BattsShootSwapVar;

                                                            if (!BattsShootSwapVar)
                                                            {
                                                                      combo_run(BattsLBSwap);
                                                            }
                                                            else
                                                            {
                                                                      combo_run(BattsRBSwap);
                                                            }
                                                  }
                                        } // 🔚END BATTS SHOOTSWAP

                                        if (DAMsPumpSmg)
                                        {
                                                  if (DAMsPumpSmg && get_ival(Reload))
                                                  {
                                                            Trigger = 1;
                                                  }

                                                  if (Trigger == 1)
                                                  {
                                                            combo_run(BlinkVib);

                                                            if (get_val(NWeapon) || get_val(PWeapon) || get_val(Reload))
                                                                      BumperTog = 0;

                                                            do
                                                            {
                                                                      rtime[DaM] = (rtime[DaM] + get_rtime()) * !(event_release(DaM));
                                                                      if (rtime[DaM] < 0)
                                                                                rtime[DaM] = 32767;
                                                            } while (DaM = (DaM + 1) % 21);

                                                            if (event_release(Fire) && !get_val(Crouch))
                                                                      triggerRelease = BumperTog++;

                                                            if (triggerRelease)
                                                            {
                                                                      if (BumperTog & 1)
                                                                      {
                                                                                set_val(NWeapon, (!check_rel(Fire, BumperReleaseT) * 100));
                                                                                if (!get_val(NWeapon))
                                                                                          triggerRelease = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                                set_val(PWeapon, (!check_rel(Fire, BumperReleaseT) * 100));
                                                                                if (!get_val(PWeapon))
                                                                                          triggerRelease = 0;
                                                                      }
                                                            }
                                                  }

                                                  if (get_ival(Edit) || p(Build) || get_ival(F2))
                                                  {
                                                            Trigger = Off;
                                                            if (Trigger = 0)
                                                                      combo_stop(BlinkVib);
                                                  }

                                        } // 🔚END DAMS PUMPSWAP
                              }           // 🔚END SHOOTSWAPMOD

                              if (AutoFishMod)
                              {
                                        if ((AutoFish && !g(Fire) && get_rumble(RUMBLE_A) == 12) && (get_rumble(RUMBLE_B) == 12) && (get_rumble(RUMBLE_LT) == 12) && (get_rumble(RUMBLE_RT) == 12))
                                        {
                                                  combo_run(AutoFishCMB);
                                        }
                              }

                    } // 🔚END COMBATMODE

                    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
                    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

          } // 🔚END KILLSW OFF

          if (KillSwitch)
          {
                    combo_run(rgb);
          }

          if (BlockButtonXI)
          {
                    if (r(BlockButtonXI))
                    {
                              BlockButtonXI = Off;
                    }
                    else
                    {
                              s(BlockButtonXI, Off);
                    }
          }

          Last_Rx = Actual_Rx;
          Last_Ry = Actual_Ry;

          //	𝐌𝐄𝐍𝐔 𝐒𝐄𝐂𝐓𝐈𝐎𝐍

          if (!MainMenu && g(MenuEnterH) && p(MenuEnterP)) //Menu Toggle
          {
                    MenuToggle(On, On, On, On, On, Off);
          }

          if (MainMenu)
          {
                    Scroll();
                    combo_stop(Boot);
                    MenuTimeout += get_rtime();

                    if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitP) || event_press(MenuExitP))
                    {
                              MenuTimeout = Off;
                    }

                    if ((MenuTimeout >= TimeoutLimitM || event_press(MenuExitP) || MenuTimeout >= TimeoutLimitM || event_press(Build)))
                    {

                              MenuToggle(Off, Off, Off, Off, Off, Off);
                              vibrateB = On;
                              menuVar = Off;
                              combo_run(Rumble1);
                    }

                    if (event_press(ChangeMenuP))
                    {
                              changemenupress = changemenupress + 1;
                              MenuValues = !MenuValues;
                              ModIndex = On;
                              Update = On;
                    }
                    if (changemenupress > 2)
                    {
                              changemenupress = 0;
                    }

                    if (changemenupress == 0)
                    {
                              MenuSW = On;
                              MenuValues = Off;
                              SensValues = Off;
                    } //changemenupress[INDEXER] = change_options(changemenupress[INDEXER], 1,0 );
                    if (changemenupress == 1)
                    {
                              MenuValues = On;
                              MenuSW = Off;
                              SensValues = Off;
                    }
                    if (changemenupress == 2)
                    {
                              SensValues = On;
                              MenuValues = Off;
                              MenuSW = Off;
                    }

                    if (MenuSW)
                    {
                              ModSW[ModIndex] = PrintMod(ModSW[ModIndex], Off, On, 1, IndexMinSW, IndexMaxSW, ModToggle[ModIndex]);
                    }
                    BlockButton(Left);
                    BlockButton(Right);
                    BlockButton(Up);
                    BlockButton(Down);
                    BlockButton(ChangeMenuP);
                    BlockButton(MenuExitP);

                    if (MenuValues)
                    {
                              ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex], ModDigitMin[ModIndex], ModDigitMax[ModIndex], ModIncrement[ModIndex], IndexMinValues, IndexMaxValues, ModValue[ModIndex]);
                              Stop_Input()
                    }

                    if (SensSW)
                    {
                              SensTog[ModIndex] = PrintMod(SensTog[ModIndex], Off, On, 1, IndexSensMinSW, IndexSensMaxSW, SensToggle[ModIndex]);
                    }
                    BlockButton(Left);
                    BlockButton(Right);
                    BlockButton(Up);
                    BlockButton(Down);
                    BlockButton(ChangeMenuP);
                    BlockButton(MenuExitP);

                    if (SensValues)
                    {
                              SensDigit[ModIndex] = PrintMod(SensDigit[ModIndex], SensDigitMin[ModIndex], SensDigitMax[ModIndex], SensDigitInc[ModIndex], IndexSensMinValues, IndexSensMaxValues, SensValue[ModIndex]);
                    }
                    BlockButton(Reload);
                    BlockButton(Edit);
                    BlockButton(Jump);
                    BlockButton(PWeapon);
                    BlockButton(NWeapon);
                    BlockButton(ChangeMenuP);
                    BlockButton(MenuExitP);
          }

          if (!MainMenu && get_ival(FindSlotH) && event_press(FindSlotP))
          {
                    Slot = On;
                    combo_run(Boot);
          }

          if (ToggleTime)
          {
                    TimeToggle();
          }

} //	⌫ ＥＮＤ ＯＦ ＭＡＩＮ

/*🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 */

//	𝐂𝐎𝐌𝐁𝐎𝐒

combo AimExpo
{

	set_val(10, (EXPOAssistStr));
	wait(10)
	    set_val(9, (EXPOAssistStr));
	wait(10)
	    set_val(10, EXPOAssistStr * -1);
	wait(10)
	    set_val(9, EXPOAssistStr * -1);
	wait(10)
}

combo AutoFishCMB
{
	wait(UpdateT);
	s(Fire, 100);
	wait(UpdateT);
}

combo AutoRunCMB
{
	s(LY, -100);
	led(LOff);
	wait(10000);
	autorunSW = 2;
}

combo BattsRBSwap
{
	wait(BattsSwapT);
	s(NWeapon, 100);
	wait(BattsSwapT);
}

combo BattsLBSwap
{
	wait(BattsSwapT);
	s(PWeapon, 100);
	wait(BattsSwapT);
}

combo BlinkVib
{
	reset_leds();
	led(DarkPurp);
	set_rumble(RUMBLE_B, 1);
	wait(UpdateT);
	led(DarkOrange);
	set_rumble(RUMBLE_B, 0);
	wait(400);
}

combo Boot
{
	wait(Slot);
	if (Slot == 20000)
		cls_oled(0);

	if (Slot)
	{
		cls_oled(0);
		printf(5, 10, 0, 1, MiscString[3]);
		printf(5, 25, 0, 1, MiscString[4]);
		printf(18, 45, 0, 1, MiscString[5]);
		NumX = 32;
		NumY = 15;
		NumS = 0;
		FindDigit(get_slot(), DigitValue(get_slot()));
		Slot = Off;
	}

	wait(20000);
	cls_oled(0);
	Clear = On;
}

combo BuildPro
{
	s(Switch, 0);
	wait(UpdateT);
	s(Switch, 100);
	wait(UpdateT);
}

combo Confirm
{
	s(Confirm, 100);
	wait(UpdateT);
	s(Confirm, 0);
	wait(UpdateT - get_rtime());

	ediT = Off;
	confirmTSW = On;
}

combo CrouchOnL2CMB
{
	wait(CrouchShotT);
	set_val(Crouch, 100);
	wait(50);
	set_val(Crouch, 0);
}
combo DropShot
{
	s(Crouch, 100);
	wait(random(40, 100));
	s(Crouch, 0);
	wait(random(40, 80 - get_rtime()));
}

combo DynAbuseCMB
{
	s(Ads, 100);
	wait(dynabuseT);
	s(Ads, 0);
	wait(DynamicAAWait);
}

combo EditCancel
{
	s(Select, 0);
	wait(40);
	wait(4000);
}

combo Emote
{
	s(Left, 100);
	s(RY, 100);
	wait(200);
	s(Left, 0);
	s(RY, 0);
	wait(1500);
	s(Fire, 100);
	wait(100);
	s(Fire, 0);
	wait(100);
}

combo FastEdit
{
	set_val(EAssist, 100);
	wait(BTNUpdate);
	set_val(EAssist, 0);
	wait(BTNUpdate - get_rtime());
	set_val(Select, 100);
	wait(BTNUpdate);
	set_val(Select, 0);
	wait(BTNUpdate - get_rtime());
	set_val(Confirm, 100);
	wait(BTNUpdate);
	set_val(Confirm, 0);
	wait(BTNUpdate - get_rtime());
}

combo FasstL
{
	set_val(LX, (inv(get_ival(RX))));
	wait(2000);
}

combo FasstR
{
	set_val(LX, (get_ival(RX)));
	wait(2000);
}

combo FastReset
{
	set_val(EAssist, 100);
	wait(UpdateT);
	set_val(Reset, 100);
	wait(UpdateT);
	set_val(Reset, 0);
	wait(UpdateT - get_rtime());
	set_val(Confirm, 100);
	wait(UpdateT);
	set_val(Confirm, 0);
	wait(UpdateT - get_rtime());
	wait(100);
}

combo FirstSlotSyncCMB
{
	s(Pickaxe, 100);
	wait(50);
	s(Build, 100);
	wait(20);
	s(Pickaxe, 100);
	wait(20);
	s(NWeapon, 100);
	wait(50);
	ohshit = 0;
	wait(100);
	switch_modes(0, 0, 0, 0, 1, 0, 5);
}
combo FirstSlotSyncCMB_P
{
	s(Build, 100);
	wait(50);
	s(Pickaxe, 100);
	wait(50);
	s(NWeapon, 100);
	wait(50);
	ohshit = 0;
	wait(100);
	switch_modes(0, 0, 0, 0, 1, 0, 5);
}
combo FirstSlotSyncCMB_B
{

	s(Pickaxe, 100);
	wait(50);
	s(NWeapon, 100);
	wait(50);
	led(MediumBlue);
	ohshit = 0;
	wait(100);
	switch_modes(0, 0, 0, 0, 1, 0, 5);
}

combo Forward
{
	set_val(LY, -100);
	wait(1000);
}

combo HeadAssist{

	set_val(aimY,inv(Head) + get_val(aimY));
}

combo Slide
{
	set_val(Crouch, 100);
	wait(1000);
}

combo PerfectAccuracy
{
	set_val(Fire, 100);
	wait(100);
	wait(PerfAccT);
	set_val(Fire, 100);
}

combo Pickaxe
{
	set_val(Pickaxe, 100);
	wait(30);
	set_val(Pickaxe, 0);
	wait(30);
	axe = Off;
}

combo ProPickCMB
{

	wait(30);
	set_val(Pickaxe, 100);
	wait(PickaxePressT + LagCounterT);
	set_val(Pickaxe, 0);
	wait(PickaxeRelT + LagCounterT);
	set_val(Pickaxe, 100);
	wait(PickaxePressT + LagCounterT);
	set_val(Pickaxe, 0);
	wait(PickaxeRelT + LagCounterT);
	set_val(Pickaxe, 100);
	wait(PickaxePressT + LagCounterT);
	set_val(Pickaxe, 0);
	wait(PickaxeRelT + LagCounterT);
	if (iPickaxe)
	{
		axe = Off;
	}
	//switch_modes(1,0,0,0,0,0,1);
}

combo PressBuild
{
	s(Build, 100);
	wait(UpdateT);
	s(Build, 0);
	wait(UpdateT - get_rtime());
}

combo PumpBuild1
{
	s(Fire, 100);
	wait(40);
	s(Jump, 100);
	s(Build, 100);
	wait(100);
	set_val(Build, 0);
	wait(UpdateT - get_rtime());

	autoEditReset = 0;
}

combo RampRushStart
{
	s(Jump, 100);
	s(LY, -100);
	wait(100);
	s(Floor, 100);
	s(Ramp, 100);
	wait(100 + 200);
	s(Wall, 100);
	wait(40);
	BuildCount = Off;
	ramprushVar++;
}

combo RampRush
{
	s(Jump, 100);
	s(LY, -100);
	wait(100);
	s(Floor, 100);
	s(Ramp, 100);
	wait(100);
	s(Wall, 100);
	wait(40);
	BuildCount = Off;
	ramprushVar++;
}

combo RapidFire
{
	set_val(Fire, 100);
	wait(10);
	set_val(Fire, 0);
	wait(10);
}

combo rgb
{
	wait(10);
	set_rgb(color, color[1], color[2]);
	color[dec] -= 3;
	color[inc] += 3;
	if (!color[dec])
	{
		inc = (inc + 1) % 3;
		vm_tctrl(inc - 9 % 99);
		dec = (dec + 1) % 3;
		vm_tctrl(inc - 9 % 99);
	}
}

combo Rumble
{
	if (event_press(RecoilUpP))
		set_rumble(RUMBLE_A, 35);

	else if (event_press(RecoilDnP))
		set_rumble(RUMBLE_B, 70);

	wait(250);
	reset_rumble();
}

combo Rumble1
{
	if (vibrateA)
		set_rumble(RUMBLE_A, 15);

	else if (vibrateB)
		set_rumble(RUMBLE_B, 15);

	wait(250);
	vibrateA = Off;
	vibrateB = Off;
	reset_rumble();
}

combo Rumble3
{
	set_rumble(RUMBLE_B, 5);
	wait(30);
	set_rumble(RUMBLE_B, 0);
	wait(400);
}

combo SmartShot
{

	set_val(LX, -100 + get_ival(LX));
	wait(170);
	set_val(LX, 100 - get_ival(LX));
	wait(170);
}

combo TrumpBuild
{
	cmb_counter = 0;
	s(Build, 100);
	wait(UpdateT);
	s(Build, 0);
	wait(UpdateT - get_rtime());
	Trump = 2;
}

combo TrumpWall
{
	s(Wall, 100);
	wait(20 + get_rtime());
	s(Wall, 0);
	wait(20 - get_rtime());
	if (Trump == 2)
	{
		combo_restart(TrumpWall);
		combo_stop(TrumpBuild);
	}
}

combo WallHold
{
	s(Build, 100);
	wait(40);
	s(Wall, 100);
	wait(WT_A);
	s(Build, 0);
	s(Wall, 0);
	wait(30);
	s(Build, 100);
	wait(30);
	s(Build, 0);
	s(N_Weapon, 100);
	wait(WT_B);
	walltakeT = 0;
	PickaxeMode = Off;
	CombatMode = On;
}

combo WallTake
{
	s(Build, 100);
	wait(40);
	s(Wall, 100);
	wait(200);
	s(Build, 0);
	s(Wall, 0);
	wait(30);
	s(Build, 100);
	wait(30);
	s(Build, 0);
	s(NWeapon, 100);
	wait(WallTakeT2);
	WallTakeT = 0;
	switch_modes(0, 0, 0, 0, 1, 0, 5);
}

combo VibrateBlink
{

	if (Modled)
	{
		set_rgb(0, 255, 0);
		set_rumble(RUMBLE_A, 15);
	}
	else
	{
		set_rgb(255, 0, 0);
		set_rumble(RUMBLE_B, 15);
	}
	wait(150);
	set_rgb(0, 0, 0);
	wait(150);
	reset_rumble();

	if (Modled)
		set_rgb(0, 255, 0);
	else
		set_rgb(255, 0, 0);

	wait(150);
	reset_leds();
}

//	𝐅𝐔𝐍𝐂𝐓𝐈𝐎𝐍𝐒

function EditAssist()
{

	ediT = ediT + get_rtime();

	if (get_ival(EAssist) && Zone1 == 0)
	{
		if (ediT >= EditDelT)
			Press(Select);
	}
}

function EditAssistCancel()
{
	ediT2 = ediT2 + get_rtime();

	if (ediT2 >= EditDelT2)
		Press(Select);
}

function Press(Button)
{
	if (get_ival(Button))
		return;
	set_val(Button, 100);
}

int double__tap;
function double_click(button)
{
	if (double__tap[button] >= 0)
	{
		double__tap[button] += get_rtime();
		if (double__tap[button] > 450)
			double__tap[button] = -1;
	}
	if (event_release(button) && get_ptime(button) <= 200)
	{
		if (double__tap[button] < 0)
		{
			double__tap[button] = 0;
		}
		else
		{
			double__tap[button] = -1;
			return 1;
		}
	}
	return 0;
}

function BlockButton(Button)
{

	if (!get_ival(Button))
		return;
	set_val(Button, Off);
}

function dpadcorrection()
{
	// PS5 DPAD CORRECTION
	if (g(Left))
	{
		s(Right, 0);
		s(Up, 0);
		s(Down, 0);
	}
	if (g(Right))
	{
		s(Left, 0);
		s(Up, 0);
		s(Down, 0);
	}
	if (g(Up))
	{
		s(Left, 0);
		s(Right, 0);
		s(Down, 0);
	}
	if (g(Down))
	{
		s(Left, 0);
		s(Up, 0);
		s(Right, 0);
	}
}

int cur_rumble;

function RumbleToUse()
{
	if (get_rumble(RumbA) == get_rumble(RumbB))
	{
		cur_rumble = get_rumble(RumbA);
	}
	if (get_rumble(RumbA) > get_rumble(RumbB))
	{
		cur_rumble = get_rumble(RumbA);
	}
	if (get_rumble(RumbA) < get_rumble(RumbB))
	{
		cur_rumble = get_rumble(RumbB);
	}
}

function DamsRumbleToUse()
{

	if (get_rumble(RumbA) >= get_rumble(RumbB))
		return RumbA;
	return RumbB;
}

/*┌── AIM ASSIST ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
/*└────── ▼ ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
int AssistProfile = 1;
function AimAssist(LINAssistStr, Step)
{

	if (Power)
	{

		Ypower = LINAssistStr;
		Xpower = LINAssistStr * -1;
		AimAssistInc = Step;
		Power = Off;
	}

	if (!power)
	{

		Xpower += AimAssistInc;
		Ypower -= AimAssistInc;
	}
	else
	{

		Xpower -= AimAssistInc;
		Ypower += AimAssistInc;
	}

	CountPower++;

	if (CountPower >= (LINAssistStr / AimAssistInc))
	{

		power = !power;
		CountPower = 0;
	}

	if (AxisXY > 8)
	{ //put DZ here

		if (Reducer)
		{

			set_Val(aimY, (Ypower - LINAssistStr / 2));
			set_Val(aimX, (Xpower - LINAssistStr / 2 * -1));
		}
		else
		{

			set_val(aimY, (Ypower - LINAssistStr / 2) + get_ival(aimY));
			set_val(aimX, (Xpower - LINAssistStr / 2 * -1) + get_ival(aimX));
		}
	}
	else
	{

		if (Reducer)
		{

			set_Val(aimY, (Ypower - LINAssistStr / 2));
			set_Val(aimX, (Xpower - LINAssistStr / 2 * -1));
		}
		else
		{

			set_val(aimY, (Ypower - LINAssistStr / 2));
			set_val(aimX, (Xpower - LINAssistStr / 2 * -1));
		}
	}
}

function AimAssistTimes() {

	AAT += get_rtime();
	
	if (!Axis) 
		
		set_Val(aimY,AAT * PowerTimes / 10 * 2);
		
	if (Axis == 1)  
		
		set_Val(aimX,AAT * PowerTimes / 10 * 2);
	
	if (Axis == 2)  
		
		set_Val(aimY,inv(AAT * PowerTimes / 10 * 2));

	if (Axis == 3) {
		
		set_Val(aimX,inv(AAT * PowerTimes / 10 * 2));
	
		if (AAT > 50) {
		
			AAT = 0;
			Axis = 0;
		}
	
	} else if (AAT > 50) {
		
		AAT = 0;
		Axis += 1;
	}
}


/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

function set_Val(Input, Output)
{

	set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
	return;
}

function LegacyAR()
{

	Set_Val(RY, AR_Value);
}

function DoGzProgressionV2()
{

	if (DoGzProgressionV2)
	{
		if (DoGzARPos)
		{
			DoGzARVal += 1;
		}
		else
		{
			DoGzARVal -= 1;
		}

		if (DoGzARPos && DoGzARVal == ArProgEndT)
			DoGzARPos = Off;

		if (!DoGzARPos && DoGzARVal == ArProgStartT)
			DoGzARPos = On;

		if (ProgARInvert)
		{
			Set_Val(RY, DoGzARVal * -1);
		}
		else
		{
			Set_Val(RY, DoGzARVal);
		}
	}
}

function Set_Val(Input, Output)
{

	set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
	return;
}

/*	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	*/
function check_rel(DaMo, time)
{
	return time_release(DaMo) >= time && !get_val(DaMo);
}

function time_release(DaMo)
{
	return rtime[DaMo];
}
/*	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	☩	*/

function PolarFlow(PFB, PSV, PFV, PV, PF, PID)
{
	if (PF)
	{
		PFB += PV;
		if (PFB <= PFV)
			return PFB;
		if (PFB > PFV)
		{
			PVID[PID] = 0;
			return PFB - PV;
		}
	}
	else
	{
		PFB -= PV;
		if (PFB >= PSV)
			return PFB;
		if (PFB < PSV)
		{
			PVID[PID] = 1;
			return PFB + PV;
		}
	}
	return FALSE;
}

function Stop_Input()
{

	s(Jump, 0);
	s(Crouch, 0);
	s(PWeapon, 0);
	s(NWeapon, 0);
	s(Reload, 0);
	s(Edit, 0);

	s(PS4_SHARE, 0);
	s(PS4_OPTIONS, 0);

	s(PS4_TRIANGLE, 0);
	s(PS4_CROSS, 0);
	//s(PS4_CIRCLE,0);
	s(PS4_SQUARE, 0);

	s(PS4_UP, 0);
	s(PS4_DOWN, 0);
	s(PS4_LEFT, 0);
	s(PS4_RIGHT, 0);
}

int Zone1, Zone2, Zone3, Zone4, Zone5, Zone6, Zone7, Zone8, Zone9, ZoneP, Zone, ZoneTime, ZoneT;

function tpad_calc()
{

	if (ps4_touchpad(P1) && !ps4_touchpad(P2))
	{
		ZoneTime += get_rtime();
		// ZONE ONE
		if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 1, 0, 1);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 2, 0, 2);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && g(Edit) && !g(Reload) && !g(Build) && !g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 3, 0, 3);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && g(Reload) && !g(Build) && !g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 4, 0, 4);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && !g(Reload) && g(Build) && !g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 5, 0, 5);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && g(Jump) && !g(NWeapon))
		{
			Zone1 = clamp(Zone1 + 6, 0, 6);
		}
		else if (g(F1X) < -66 && g(F1X) > -100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump) && g(NWeapon))
		{
			ZoneP = clamp(Zone1 + 1, 0, 1);
		}
		else
		    // ZONE TWO
		    if (g(F1X) < -10 && g(F1X) > -65 && g(F1Y) < -10 && g(F1Y) > -110)
		{
			Zone2 = clamp(Zone2 + 1, 0, 1);
		}
		else if (g(F1X) < -10 && g(F1X) > -65 && g(F1Y) < -10 && g(F1Y) > -110 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && g(Jump))
		{
			Zone2 = clamp(Zone2 + 2, 0, 1);
		}
		else
		    // ZONE THREE
		    if (g(F1X) > 10 && g(F1X) < 50 && g(F1Y) < -10 && g(F1Y) > -110)
		{
			Zone3 = clamp(Zone3 + 1, 0, 1);
		}
		else if (g(F1X) > 10 && g(F1X) < 50 && g(F1Y) < -10 && g(F1Y) > -110 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && g(Jump))
		{
			Zone3 = clamp(Zone3 + 2, 0, 1);
		}
		else
		    // ZONE FOUR
		    if (g(F1X) > 10 && g(F1X) < 100 && g(F1Y) < -10 && g(F1Y) > -110 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone4 = clamp(Zone4 + 1, 0, 1);
		}
		else if (g(F1X) > 10 && g(F1X) < 100 && g(F1Y) < -10 && g(F1Y) > -110 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone4 = clamp(Zone4 + 2, 0, 2);
		}
		else
		    // ZONE FIVE
		    if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone5 = clamp(Zone5 + 1, 0, 1);
		}
		else if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone5 = clamp(Zone5 + 2, 0, 2);
		}
		else if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone5 = clamp(Zone5 + 3, 0, 3);
		}
		else if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && !g(Edit) && g(Reload) && !g(Build) && !g(Jump))
		{
			Zone5 = clamp(Zone5 + 4, 0, 4);
		}
		else if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && !g(Edit) && !g(Reload) && g(Build) && !g(Jump))
		{
			Zone5 = clamp(Zone5 + 5, 0, 5);
		}
		else if (g(F1X) < -20 && g(F1X) > -100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && g(Jump))
		{
			Zone5 = clamp(Zone5 + 6, 0, 6);
		}
		else
		    // ZONE SIX
		    if (g(F1X) > 20 && g(F1X) < 100 && g(F1Y) > -10 && g(F1Y) < 130 && !g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone6 = clamp(Zone6 + 1, 0, 1);
		}
		else if (g(F1X) > 20 && g(F1X) < 100 && g(F1Y) > -10 && g(F1Y) < 130 && g(TPAD) && !g(Edit) && !g(Reload) && !g(Build) && !g(Jump))
		{
			Zone6 = clamp(Zone6 + 2, 0, 2);
		}
	}
	else if (ps4_touchpad(P1) && ps4_touchpad(P2))
	{
		ZoneTime += get_rtime();
		if (ps4_touchpad(P1X) < 100 && ps4_touchpad(P1X) > -100 && ps4_touchpad(P2Y) < 20 && ps4_touchpad(P2Y) > -100)
		{
			Zone7 = clamp(Zone7 + 2, 0, 2);
		}
		else if (ps4_touchpad(P1X) < -60 && ps4_touchpad(P1X) > -100 && ps4_touchpad(P2Y) < -50 && ps4_touchpad(P2Y) > -100)
		{
			Zone8 = clamp(Zone8 + 1, 0, 1);
		}
		else if (ps4_touchpad(P1X) > -100 && ps4_touchpad(P2Y) > 50 && ps4_touchpad(P2Y) < 100)
		{
			Zone9 = clamp(Zone9 + 1, 0, 1);
		}
	}
	else if (!ps4_touchpad(P1) && !ps4_touchpad(P2))
	{
		Zone1 = Off;
		Zone2 = Off;
		Zone3 = Off;
		Zone4 = Off;
		Zone5 = Off;
		Zone6 = Off;
		Zone7 = Off;
		Zone8 = Off;
		Zone9 = Off;
		ZoneP = Off;
		ZoneTime = Off;
	}
}

function checkJumpTime()
{
	combo_stop(CrouchOnL2CMB);
}

const string TRACK[] = {"PICKAXE ", "BUILD+P ", "BUILD", "EDIT", "COMBAT", "MENU/RESYNC", "MAP/RESYNC", "INV/RESYN", ""};
const string SUBMENU[] = {"", "ALL MODES OFF", ""};

const string QT_ON = "ON";
const string QT_OFF = "ALL MODES OFF";

function display_Add_QT(togg_number)
{

	cls_oled(0);
	if (togg_number == 1 && !MainMenu)
	{
		printf(center_x1(get_track_chars(0), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[0]);
		//  printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
	}
	if (togg_number == 2 && !MainMenu)
	{
		printf(center_x1(get_track_chars(1), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[1]);
		//  printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
	}
	if (togg_number == 3 && !MainMenu)
	{
		printf(center_x1(get_track_chars(2), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[2]);
		//  printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
	}
	if (togg_number == 4 && !MainMenu)
	{
		printf(center_x1(get_track_chars(3), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[3]);
		//  printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
	}
	if (togg_number == 5 && !MainMenu)
	{
		printf(center_x1(get_track_chars(4), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[4]);
		//  printf( 47 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
	}
	if (togg_number == 6 && !MainMenu)
	{
		printf(center_x1(get_track_chars(5), OLED_FONT_MEDIUM_WIDTH), 10, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[5]);
		printf(10, 30, OLED_FONT_SMALL, OLED_WHITE, QT_OFF[0]);
	}
	if (togg_number == 7 && !MainMenu)
	{
		printf(center_x1(get_track_chars(6), OLED_FONT_MEDIUM_WIDTH), 10, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[6]);

		printf(10, 30, OLED_FONT_SMALL, OLED_WHITE, QT_OFF[0]);
	}
	if (togg_number == 8 && !MainMenu)
	{
		printf(center_x1(get_track_chars(7), OLED_FONT_MEDIUM_WIDTH), 10, OLED_FONT_MEDIUM, OLED_WHITE, TRACK[7]);

		printf(10, 30, OLED_FONT_SMALL, OLED_WHITE, QT_OFF[0]);
	}

	mode_message_timeout = 4000;
}
function switch_modes(prf1, prf2, prf3, prf4, prf5, prf6, qt_message)
{
	// if(qt_message == 6 )modetracking = FALSE;
	// else modetracking = TRUE;
	trackPickaxe = prf1; // turn Profile 1 ON / OFF
	trackBuildP = prf2;	 // turn Profile 2 ON / OFF
	trackBuild = prf3;	 // turn Profile 3 ON / OFF
	trackEdit = prf4;	 // turn Profile 3 ON / OFF
	trackCombat = prf5;	 // turn Profile 3 ON / OFF
	MenuReSync = prf6;	 // turn Profile 3 ON / OFF
	display_Add_QT(qt_message);
}
function center_x(f_chars, f_font)
{
	return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function center_x1(f_chars, f_font)
{
	return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

function get_track_chars(f_idx)
{ // This is the string list for "MODES" \\
		if (TRACK[f_idx + 1] != -1)
	return TRACK[f_idx + 1] - TRACK[f_idx] - 1;
	return sizeof(TRACK) - TRACK[f_idx];
}

function modemessage_timeout()
{
	cls_oled(0);
	//display_title  = FALSE;
}

function smartTrackLEDS()
{
	if (trackPickaxe)
		led(BrightPurp);
	else if (trackBuildP)
		led(DarkRed3);
	else if (trackBuild)
		led(MediumRed);
	else if (trackEdit)
		led(Yellow);
	else if (trackCombat)
		led(MediumGrn);
	else if (PressedMenu)
		led(MediumBlue);
}

function smartTrack()
{
	smartTrackLEDS()
	    /*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	    /*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/

	    if (!PressedMenu && !g(Ads) && g(MenuEnterH) && p(MenuEnterP))
	{ //◁ GAME MENU
		PressedMenu = 1;
		
		switch_modes(0, 0, 0, 0, 0, 1, 6);
	}
	else if (!PressedMenu && !g(Ads) && p(Map))
	{ //◁  MAP
		PressedMenu = 2;
		switch_modes(0, 0, 0, 0, 0, 1, 7);
	}
	else if (!PressedMenu && !g(Ads)  && p(Inventory))
	{ //◁  INVENTORY
		PressedMenu = 3;
		switch_modes(0, 0, 0, 0, 0, 1, 8);
	}
	else if ((PressedMenu == 1 && p(MenuExitP)) ||  ((PressedMenu == 2 && p(MenuExitP)) || ((PressedMenu == 3 && p(MenuExitP) || ((PressedMenu != 0 && PressedMenu <= 3 && p(Build)))))))
	{
		PressedMenu = Off;

		if (ShotgunReSync)
		{
			combo_run(FirstSlotSyncCMB);
		}
		switch_modes(0, 0, 0, 0, 1, 0, 5);
	}

	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackPickaxe)
	{

		if (BuildVar == 1)
		{
			switch_modes(0, 1, 0, 0, 0, 0, 2);
		}

		if (p(PWeapon) || p(NWeapon))
		{
			switch_modes(0, 0, 0, 0, 1, 0, 5);
		}

		if (g(Edit))
		{
			EditVar = max(EditVar + 1, 1);
			switch_modes(0, 0, 0, 1, 0, 0, 4);
		}
		if (g(Pickaxe) || ZoneP || quickpick )
		{
			PickaxeVar = max(PickaxeVar + 1, 1);
			switch_modes(1, 0, 0, 0, 0, 0, 1);
		}

		if (PickaxeVar == 5)
		{
			BuildVar = 0;
			if (r(Pickaxe) || ZoneP || quickpick)
				switch_modes(1, 0, 0, 0, 0, 0, 1);
		}
		if (UpVar == 4)
		{
			switch_modes(1, 0, 0, 0, 0, 0, 1);
		}
	}
	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackBuildP)
	{

		if (BuildVar == 2 || combo_running(FirstSlotSyncCMB))
		{
			switch_modes(1, 0, 0, 0, 0, 0, 1);
			BuildVar = 0;
		}

		else if (g(Edit))
		{
			EditVar = max(EditVar + 4, 4);
			switch_modes(0, 0, 0, 1, 0, 0, 4);
		}
		else if (p(Pickaxe || ZoneP || quickpick))
		{
			PickaxeVar = max(PickaxeVar + 5, 5);
			switch_modes(1, 0, 0, 0, 0, 0, 1);
		}
		/*else
				if(g(Pickaxe)||ZoneP){
				PickaxeVar = 5;
				switch_modes(1,0,0,0,0,1);
				PickaxeVar = 0;
				}*/
	}
	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackBuild)
	{

		if (BuildVar == 2 || combo_running(FirstSlotSyncCMB))
		{
			switch_modes(0, 0, 0, 0, 1, 0, 5);
			BuildVar = 0;
		}
		if (BuildVar == 4)
		{
			switch_modes(1, 0, 0, 0, 1, 0, 1);
			BuildVar = 0;
		}
		if (g(Edit))
		{
			EditVar = max(EditVar + 2, 2);
			switch_modes(0, 0, 0, 1, 0, 0, 4);
		}
		if (p(Pickaxe || ZoneP || quickpick))
		{
			PickaxeVar = max(PickaxeVar + 5, 5);
			switch_modes(1, 0, 0, 0, 0, 0, 1);
		}
	}

	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackEdit)
	{

		if (EditVar == 1)
		{
			if (r(Edit))
			{ //Return to Pickaxe
				switch_modes(1, 0, 0, 0, 0, 0, 1);
				EditVar = 0;
			}
		}
		if (EditVar == 2)
		{
			if (r(Edit))
			{ //Return to Build
				switch_modes(0, 0, 1, 0, 0, 0, 3);
				EditVar = 0;
			}
		}
		if (EditVar == 3)
		{
			if (r(Edit))
			{ //Return to Combat
				switch_modes(0, 0, 0, 0, 1, 0, 5);
				EditVar = 0;
			}
		}
		if (EditVar == 4)
		{
			if (r(Edit))
			{ //Return to PickBuild
				switch_modes(0, 1, 0, 0, 0, 0, 2);
				EditVar = 0;
			}
		}
	}
	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackCombat)
	{

		if (BuildVar == 1)
		{
			switch_modes(0, 0, 1, 0, 0, 0, 3);
		}
		if (g(Edit))
		{
			EditVar = max(EditVar + 3, 3);
			switch_modes(0, 0, 0, 1, 0, 0, 4);
		}
		if (g(Pickaxe) || ZoneP || quickpick)
		{
			switch_modes(1, 0, 0, 0, 0, 0, 1);
		}
	}
	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (p(Build))
	{
		BuildVar = clamp(BuildVar + 1, 0, 5);
	}
}
/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
// functions on good buildmode END //
int VarT;
function zero_V(f_var)
{
	VarT = VarT + get_rtime();

	if (VarT >= 50)
	{
		f_var = 0;
		VarT = 0;
	}
}

int check_dz_trace;
int check_stick_trace;
int check_shape_trace;

function dz_calc(Stick, Val, Shape)
{

	Stick += 7;

	if (Shape == DZ_CIRCLE)
	{
		if (isqrt(pow(get_ival(Stick), 2) + pow(get_ival(Stick + 1), 2)) <= Val)
		{
			set_val(Stick, 0);
			set_val(Stick + 1, 0);
		}
	}
	else
	{
		if (abs(get_ival(Stick)) < Val)
			set_val(Stick, 0);

		if (abs(get_ival(Stick + 1)) < Val)
			set_val(Stick + 1, 0);
	}
	check_dz_trace = Val;
//	set_val(TRACE_1, check_dz_trace);

	
}

function Sensitivity_Alignent()
{
	if (abs(get_val(LX)) < ls_stick_sens)
		set_val(LX, 0);
	if (abs(get_val(LY)) < ls_stick_sens)
		set_val(LY, 0);
	if (get_val(LX) > ls_stick_sens)
	{
		set_val(LX, (get_val(LX) + ls_stick_add));
	}
	if (get_val(LX) > 100)
	{
		set_val(LX, 100);
	}
	if (get_val(LX) < inv(ls_stick_sens))
	{
		set_val(LX, (get_val(LX) - ls_stick_add));
	}
	if (get_val(LX) < -100)
	{
		set_val(LX, -100);
	}

	if (get_val(LY) > ls_stick_sens)
	{
		set_val(LY, (get_val(LY) + ls_stick_add));
	}

	if (get_val(LY) > 100)
	{
		set_val(LY, 100);
	}

	if (get_val(LY) < inv(ls_stick_sens))

	{
		set_val(LY, (get_val(LY) - ls_stick_add));
	}

	if (get_val(LY) < -100)
	{
		set_val(LY, -100);
	}

	if (abs(get_val(aimX)) < rs_stick_sens)
		set_val(LX, 0);
	if (abs(get_val(aimY)) < rs_stick_sens)
		set_val(LY, 0);

	if (get_val(LX) > rs_stick_sens)
	{
		set_val(LX, (get_val(LX) + rs_stick_add));
	}
	if (get_val(LX) > 100)
	{
		set_val(LX, 100);
	}
	if (get_val(LX) < inv(rs_stick_sens))
	{
		set_val(LX, (get_val(LX) - rs_stick_add));
	}
	if (get_val(LX) < -100)
	{
		set_val(LX, -100);
	}

	if (get_val(LY) > rs_stick_sens)
	{
		set_val(LY, (get_val(LY) + rs_stick_add));
	}
	if (get_val(LY) > 100)
	{
		set_val(LY, 100);
	}
	if (get_val(LY) < inv(rs_stick_sens))
	{
		set_val(LY, (get_val(LY) - rs_stick_add));
	}
	if (get_val(LY) < -100)
	{
		set_val(LY, -100);
	}
}

function get_mvt_direction(_val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}



function versa_sens()
{

	/*┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐*/
	/*└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘*/
	if (trackPickaxe)
	{
		dz_calc(ls, GenDeadzone, DZ_CIRCLE) dz_calc(rs, GenDeadzone, DZ_CIRCLE);
	}
	else if (trackBuildP)
	{
		dz_calc(ls, BuildDeadzone, DZ_CIRCLE) dz_calc(rs, BuildDeadzone, DZ_CIRCLE);
	}
	else if (trackBuild)
	{
		dz_calc(ls, BuildDeadzone, DZ_CIRCLE) dz_calc(rs, BuildDeadzone, DZ_CIRCLE);
	}
	else if (trackEdit)
	{
		dz_calc(ls, EditDeadzone, DZ_CIRCLE) dz_calc(rs, EditDeadzone, DZ_CIRCLE);
	}
	else if (trackCombat)
	{

		if (!get_val(Ads) && !get_val(Fire))
		{
			dz_calc(ls, GenDeadzone, DZ_CIRCLE) dz_calc(rs, GenDeadzone, DZ_CIRCLE);
		}
		else

		    if (get_val(Ads) && !get_val(Fire))
		{
			dz_calc(ls, AimDeadzone, DZ_CIRCLE) dz_calc(rs, AimDeadzone, DZ_CIRCLE);
		}
		else

		    if (!get_val(Ads) && get_val(Fire))
		{
			dz_calc(ls, AimDeadzone, DZ_CIRCLE) dz_calc(rs, AimDeadzone, DZ_CIRCLE);
		}
		else

		    if (get_ival(Ads) && get_ival(Fire))
		{
			dz_calc(ls, AimDeadzone, DZ_CIRCLE) dz_calc(rs, AimDeadzone, DZ_CIRCLE);
		}
	}
}

//	𝐌𝐄𝐍𝐔 𝐅𝐔𝐍𝐂𝐓𝐈𝐎𝐍𝐒
// Toggle(AimAssistMod, AimAssistL[0]);
function toggleX(f_hold, f_press, f_name, f_name2)
{
	if (g(f_hold) && p(f_press))
	{
		BlockButtonXI = f_press;
		f_name = !f_name;
		ToggleName = On;
		Toggle(f_name, f_name2);
	}
}

function check_jump_time()
{

	if (p(Jump))
	{
		JumpVar = On;
		jtime += get_rtime();
	}
	if (JumpVar)
	{
		jtime += get_rtime();
	}
	if (jtime > 2000)
	{
		JumpVar = Off;
		jtime = Off;
	}
	return 0;
}

function disable_sens()
{
	ActiveSensH = Off;
	ActiveSensV = Off;
	ActiveMZ = Off;
}

function change_options(f_var, max_val, min_val)
{ //CREDITS TO EXCALIBUR FOR CHANGE OPTIONS FUNCTION

	if (event_press(Left))
	{
		f_var++;
		if (f_var > max_val)
			f_var = min_val;
		return f_var;
	}
	else if (event_press(Right))
	{
		f_var--;
		if (f_var < min_val)
			f_var = max_val;
		return f_var;
	}
	Stop_Input()

	    return f_var;
}

function Toggle(ModT, ModP)
{

	Modled = ModT;
	ToggleT = 0;
	ToggleTime = On;
	combo_run(VibrateBlink);

	if (ToggleName)
	{
		cls_oled(0);
		printf(5, 2, 0, 1, MiscString[8]);
		rect_oled(0, 11, 128, 20, 0, 1);
		rect_oled(2, 13, 124, 16, 0, 1);
		rect_oled(0, 32, 128, 20, 0, 1);
		rect_oled(2, 34, 124, 16, 0, 1);
		printf(5, 17, 0, 1, ModP);

		if (ModT)
		{
			printf(36, 38, 0, 1, MiscString[7]);
		}
		else
		{
			printf(41, 38, 0, 1, MiscString[6]);
		}
		ToggleName = Off;
	}
}

function TimeToggle()
{

	ToggleT += get_rtime();

	if (ToggleT >= 3500)
	{
		cls_oled(0);
		ToggleTime = Off;
		ToggleT = 0;
	}
}

function MenuToggle(Main, Vals, Sens, Indx, Print, Toggle)
{

	cls_oled(0);
	MainMenu = Main;
	MenuValues = Vals;
	SensValues = Sens;
	ModIndex = Indx;
	Update = Print;
	//MenuSW  	= Toggle;
	MenuValues = Toggle;
	MenuTimeout = Off;
}

function PrintMod(ModVal, ModValMin, ModValMax, ModValInc, IndexMin, IndexMax, ModValLbl)
{

	if (Update)
	{

		rect_oled(2, 2, 127, 46, 1, 0);
		Grid();
		printf(6, 25, 0, 1, MiscString[0]);
		NumX = -43;
		NumY = 10;
		NumS = -1;
		FindDigit(ModIndex, DigitValue(ModIndex));
		printf(5, 8, 0, 1, ModValLbl);

		if (MenuValues)
		{

			NumX = 0;
			NumY = 0;
			NumS = 0;
			FindDigit(ModVal, DigitValue(ModVal));
		}
		if (SensValues)
		{

			NumX = 0;
			NumY = 0;
			NumS = 0;
			FindDigit(ModVal, DigitValue(ModVal));
		}
		if (MenuSW)
		{

			if (ModVal)
			{

				printf(51, 24, 1, 1, MiscString[1]);
			}
			else
			{
				printf(46, 24, 1, 1, MiscString[2]);
			}
		}
		Update = Off;
	}

	if (event_press(Up) || get_ival(Up) && get_ptime(Up) >= 450)
	{

		Update = On;
		ModVal += ModValInc;

		if (ModVal >= ModValMax)
		{
			ModMonitor(ModValLbl);
			return ModValMax;
		}
	}

	if (event_press(Down) || get_ival(Down) && get_ptime(Down) >= 450)
	{

		Update = On;
		ModVal -= ModValInc;

		if (ModVal <= ModValMin)
		{
			ModMonitor(ModValLbl);
			return ModValMin;
		}
	}

	if (event_press(Right))
	{

		Update = On;
		ModIndex += 1;

		if (ModIndex > IndexMax)
			ModIndex = IndexMin;
	}

	if (event_press(Left))
	{
		Update = On;
		ModIndex -= 1;

		if (ModIndex < IndexMin)
			ModIndex = IndexMax;
	}
	return ModVal;
}

function ModMonitor(Mon)
{

	//  if (Mon == ModToggle[8])
}

function Grid()
{

	line_oled(126, 20, 2, 20, 2, 1);
	rect_oled(1, 1, 127, 63, 0, 1);
	line_oled(126, 46, 2, 46, 2, 1);
	line_oled(28, 20, 28, 46, 2, 1);
}

function Scroll()
{

	ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait)
	{
		ScrollWait = ScrollSpeed;

		for (ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++)
		{

			if (ScrollIndex + ScrollLine >= sizeof(Scroll))
			{
				putc_oled(ScrollIndex, Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]);
			}
			else
			{
				putc_oled(ScrollIndex, Scroll[ScrollIndex + ScrollLine]);
			}
		}
		puts_oled(ScrollX, ScrollY, 0, ScrollIndex, 1);
		ScrollLine++;

		if (ScrollLine >= sizeof(Scroll))
		{
			ScrollLine = 0;
		}
		ScrollChar--;

		if (ScrollChar < 1)
		{
			ScrollChar = 17;
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0;
	}
}

function FindDigit(Digit, Digits)
{

	if (Digit < 0)
	{
		putc_oled(Number, 45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	}
	else
		Count = 0;

	if (Digits == 5)
	{
		putc_oled(Number, FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number += 1;
	}
	if (Digits >= 4)
	{
		putc_oled(Number, FontDigits[Digit / 1000]);
		Digit = Digit % 1000;
		Number += 1;
	}
	if (Digits >= 3)
	{
		putc_oled(Number, FontDigits[Digit / 100]);
		Digit = Digit % 100;
		Number += 1;
	}
	if (Digits >= 2)
	{
		putc_oled(Number, FontDigits[Digit / 10]);
		Digit = Digit % 10;
		Number += 1;
	}
	putc_oled(Number, FontDigits[Digit]);
	puts_oled(CenterMod(Digits + Count, 1) + NumX, 25 + NumY, 1 + NumS, Number, 1);
	Number = 1;
}

function DigitValue(Number)
{

	Number = abs(Number);
	if (Number / 10000 > 0)
		return 5;
	if (Number / 1000 > 0)
		return 4;
	if (Number / 100 > 0)
		return 3;
	if (Number / 10 > 0)
		return 2;
	return 1;
}

function CenterMod(Character, Font)
{
	Position = Character * FontSize[Font][0];
	Position = (127 - Position) / 2;
	return Position;
}

define SPACE = 32; /*¦¦       ¦¦*/
define _0 = 48, A = 65, K = 75, U = 85, e = 101, o = 111, y = 121;
define EXCLAMATION = 33; /*¦¦   !   ¦¦*/
define _1 = 49, B = 66, L = 76, V = 86, f = 102, p = 112, z = 122;
define QUOTE = 34; /*¦¦   "   ¦¦*/
define _2 = 50, C = 67, M = 77, W = 87, g = 103, q = 113;
define HASH = 35; /*¦¦   #   ¦¦*/
define _3 = 51, D = 68, N = 78, X = 88, h = 104, r = 114;
define DOLLAR = 36; /*¦¦   $   ¦¦*/
define _4 = 52, E = 69, O = 79, Y = 89, i = 105, s = 115;
define PERCENT = 37; /*¦¦   %   ¦¦*/
define _5 = 53, F = 70, P = 80, Z = 90, j = 106, t = 116;
define AND = 38; /*¦¦   &   ¦¦*/
define _6 = 54, G = 71, Q = 81, a = 97, k = 107, u = 117;
define APOSTROPHE = 39; /*¦¦       ¦¦*/
define _7 = 55, H = 72, R = 82, b = 98, l = 108, v = 118;
define O_BRACKET = 40; /*¦¦   (   ¦¦*/
define _8 = 56, I = 73, S = 83, c = 99, m = 109, w = 119;
define C_BRACKET = 41; /*¦¦   )   ¦¦*/
define _9 = 57, J = 74, T = 84, d = 100, n = 110, x = 120;
define ASTERISK = 42;   /*¦¦   *   ¦¦*/
define PLUS = 43;	    /*¦¦   +   ¦¦*/
define COMMA = 44;	    /*¦¦   ,   ¦¦*/
define MINUS = 45;	    /*¦¦   -   ¦¦*/
define FULLSTOP = 46;   /*¦¦   .   ¦¦*/
define F_SLASH = 47;    /*¦¦   /   ¦¦*/
define COLON = 58;	    /*¦¦   :   ¦¦*/
define SEMICOLON = 59;  /*¦¦   ;   ¦¦*/
define B_ARROW = 60;    /*¦¦   <   ¦¦*/
define EQUAL = 61;	    /*¦¦   =   ¦¦*/
define F_ARROW = 62;    /*¦¦   >   ¦¦*/
define QUESTION = 63;   /*¦¦   ?   ¦¦*/
define AT = 64;	    /*¦¦   @   ¦¦*/
define O_SQUARE = 91;   /*¦¦   [   ¦¦*/
define b_SLASH = 92;    /*¦¦   \   ¦¦*/
define C_SQUARE = 93;   /*¦¦   ]   ¦¦*/
define U_ARROW = 94;    /*¦¦   ^   ¦¦*/
define UNDERSCORE = 95; /*¦¦   _   ¦¦*/
define TICK = 96;	    /*¦¦   `   ¦¦*/
define O_CURLY = 123;   /*¦¦   {   ¦¦*/
define BAR = 124;	    /*¦¦   |   ¦¦*/
define C_CURLY = 125;   /*¦¦   }   ¦¦*/
define WAVE = 126;	    /*¦¦   ~   ¦¦*/
define CROSS = 127;	    /*¦¦   PS  ¦¦*/
define CIRCLE = 128;    /*¦¦   PS  ¦¦*/
define SQUARE = 129;    /*¦¦   PS  ¦¦*/
define TRIANGLE = 130;  /*¦¦   PS  ¦¦*/
define UP = 131;	    /*¦¦ PS+XB ¦¦*/
define DOWN = 132;	    /*¦¦ PS+XB ¦¦*/
define LEFT = 133;	    /*¦¦ PS+XB ¦¦*/
define RIGHT = 134;	    /*¦¦ PS+XB ¦¦*/
define VIEW = 135;	    /*¦¦   XB  ¦¦*/
define MENU = 136;	    /*¦¦   XB  ¦¦*/

const uint8 Scroll[] = {/*
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
		    SPACE, SPACE, TRIANGLE, SPACE, O, r, SPACE, Y, SPACE, T, o, SPACE, E, x, i, t, SPACE,
		    SPACE, CROSS, SPACE, O, r, SPACE, A, SPACE, T, o, SPACE, N, e, x, t, SPACE, MENU,
		    SPACE, UP, SPACE, O, r, SPACE, DOWN, SPACE, T, o, SPACE, A, d, j, u, s, t,
		    SPACE, LEFT, SPACE, O, r, SPACE, RIGHT, SPACE, N, e, x, t, SPACE, M, o, d, SPACE};

const int8 DamPolar[] = {
    100, 100, 100, 100, 100, 100, 100, 100, 99, 99, 99, 99, 98, 98, 97, 97, 97, 96, 95, 95, 94, 94, 93, 92, 92, 91, 90, 89, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 75, 74, 73, 72,
    71, 70, 69, 67, 66, 65, 63, 62, 61, 59, 58, 56, 55, 53, 52, 50, 49, 47, 46, 44, 43, 41, 40, 38, 36, 35, 33, 31, 30, 28, 26, 25, 23, 21, 20, 18, 16, 14, 13, 11, 9, 7, 6, 4, 2, 0, -1, -3, -5, -7,
    -8, -10, -12, -13, -15, -17, -19, -20, -22, -24, -25, -27, -29, -30, -32, -34, -35, -37, -39, -40, -42, -43, -45, -46, -48, -50, -51, -53, -54, -55, -57, -58, -60, -61, -62, -64,
    -65, -66, -68, -69, -70, -71, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -89, -90, -91, -92, -92, -93, -93, -94, -95, -95, -96, -96, -97,
    -97, -97, -98, -98, -99, -99, -99, -99, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -99, -99, -99, -98, -98, -98, -97, -97, -96, -96, -95,
    -94, -94, -93, -93, -92, -91, -90, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -72, -71, -70, -69, -67, -66, -65, -63, -62, -61, -59, -58,
    -56, -55, -53, -52, -50, -49, -47, -46, -44, -43, -41, -40, -38, -36, -35, -33, -31, -30, -28, -26, -25, -23, -21, -20, -18, -16, -14, -13, -11, -9, -7, -6, -4, -2, 0, 2, 4, 6, 7, 9,
    11, 13, 14, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 49, 51, 52, 54, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 70, 72, 73, 74, 75, 77, 78, 79, 80,
    81, 82, 83, 84, 85, 86, 87, 88, 89, 89, 90, 91, 92, 92, 93, 94, 94, 95, 95, 96, 97, 97, 97, 98, 98, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100};
    
    
    
    define
Fire        = PS4_R2       ,LX          = PS4_LX       ,F1          = PS4_FINGER1  ,AntiRecH    = PS4_L2       ,
Ads         = PS4_L2       ,LY          = PS4_LY       ,F1X         = PS4_FINGER1X ,AntiRecP    = PS4_RIGHT    ,
NWeapon     = PS4_R1       ,RX          = PS4_RX       ,F1Y         = PS4_FINGER1Y ,AssistH     = PS4_L2       ,
PWeapon     = PS4_L1       ,RY          = PS4_RY       ,F2          = PS4_FINGER2  ,AssistP     = PS4_UP       ,
Pickaxe     = PS4_L3       ,PRX         = POLAR_RX     ,F2X         = PS4_FINGER2X ,AutoFishH   = PS4_LEFT     ,
Reload      = PS4_SQUARE   ,PRY         = POLAR_RY     ,F2Y         = PS4_FINGER2Y ,AutoFishP   = PS4_CROSS    ,
Jump        = PS4_CROSS    ,RS          = POLAR_RS     ,P1          = PS4T_P1      ,DropShotH   = PS4_SHARE    ,
Crouch      = PS4_R3       ,aimX        = PS4_RX       ,P1X         = PS4T_P1X     ,DropShotP   = PS4_DOWN     ,
Edit        = PS4_TRIANGLE ,aimY        = PS4_RY       ,P1Y         = PS4T_P1Y     ,KillSWH     = PS4_SHARE    ,
EAssist     = PS4_TRIANGLE ,DZ          = DZ_CIRCLE    ,P2          = PS4T_P2      ,KillSWP     = PS4_OPTIONS  ,
Reset       = PS4_SHARE    ,Up          = PS4_UP       ,P2X         = PS4T_P2X     ,PerfAccH    = PS4_L2       ,
Select      = PS4_SQUARE   ,Down        = PS4_DOWN     ,P2Y         = PS4T_P2Y     ,PerfAccP    = PS4_SQUARE   ,
Confirm     = PS4_L2       ,Left        = PS4_LEFT     ,On          = TRUE         ,PumpBuildH  = PS4_L2       ,
Inven       = PS4_DOWN     ,Right       = PS4_RIGHT    ,Off         = FALSE        ,PumpBuildP  = PS4_R1       ,
Ping        = PS4_SHARE    ,RumbA       = RUMBLE_A     ,TPAD        = PS4_TOUCH    ,PumpSmgH    = PS4_SQUARE   ,
Map         = PS4_RIGHT    ,RumbB       = RUMBLE_B     ,Share       = PS4_SHARE    ,PumpSmgP    = PS4_LEFT     ,
Menu        = PS4_OPTIONS  ,RumbLT      = RUMBLE_LT    ,Opt         = PS4_OPTIONS  ,RapidFModH  = PS4_L2       ,
Build       = PS4_CIRCLE   ,RumbRT      = RUMBLE_RT    ,PS          = PS4_PS       ,RapidFModP  = PS4_LEFT     ,
Switch      = PS4_CIRCLE   ,T1          = TRACE_1      ,LS          = PS4_L3       ,RecoilOTF   = PS4_CROSS    ,
Wall        = PS4_R2       ,T2          = TRACE_2      ,Sprint      = PS4_L3       ,RecoilUpP   = PS4_UP       ,
Floor       = PS4_R1       ,T3          = TRACE_3      ,                            RecoilDnP   = PS4_DOWN     ,
Roof        = PS4_L1       ,T4          = TRACE_4      ,                            ShootSwapH  = PS4_L2       ,
Ramp        = PS4_L2       ,T5          = TRACE_5      ,                            ShootSwapP  = PS4_SHARE    ,
Inventory   = PS4_DOWN     ,T6          = TRACE_6      ,                            MenuEnterH  = PS4_L2       ,
                                                                                    MenuEnterP  = PS4_OPTIONS  ,
                                                                                    MenuExitP   = PS4_CIRCLE   ,
                                                                                    ChangeMenuP = PS4_CROSS    ,
                                                                                    FindSlotH   = PS4_R3       ,
                                                                                    FindSlotP   = PS4_LEFT     ;

function g(id) { return get_ival(id); }
function p(id) { return event_press(id); }
function gl(id) { return get_lval(id); }
function s(id, fval) { set_val(id, fval); }
function r(id) { return event_release(id); }
function btn(f__btn){if (!g(f__btn))return;s(f__btn, 0);}
function hrt(h__btn){if (!g(h__btn))return;s(h__btn, 100);}
function displ(v0, v1, v2, v3, v4, v5){s(T1, v0);s(T2, v1);s(T3, v2);s(T4, v3);s(T5, v4);s(T6, v5);
}


const uint8 FontSize[][] = {{7, 10, 18}, {11, 18, 11}, {16, 26, 7}};
const uint8 FontDigits[] = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};

/*🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 */

/*𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃*/

//┌─────── ▼ ───────┐,└─────── ▲ ───────┘       ^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^  🔚 🛑 ► ◄ ▲ ▼ ◁ ▷ △ ✖
//	𝐉𝐔𝐍𝐊 𝐃𝐑𝐀𝐖𝐄𝐑  //|🔚|\\ //|🛑|\\ //|⛔️|\\pdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqp 	✖
/*
if((isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) >= 90)

if(event_release(XB360_LB) && get_ptime(XB360_LB) < 500) combo_run(special);

\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\

pdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqpdbqp

^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^V^

<<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>>

--<<O>>--<<O>>--<<O>>--<<O>>--<<O>>--<<O>>--<<O>>--<<O>>-

<*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*>


 // 	𝐓𝐑𝐢𝐆𝐆𝐆𝐄𝐑𝐑𝐑	𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃𝖃		🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇 🆇	❌❌❌  🆇 🆇 🆇	❌❌❌
//Dead Zone
if (abs(get_val(XB1_LY)) < 0 && abs(get_val(XB1_LX)) < 0 ){
set_val(XB1_LY,0);
set_val(XB1_LX,0);
}
if (abs(get_val(XB1_RY)) < 0 && abs(get_val(XB1_RX)) < 0 ){
set_val(XB1_RY,0);
set_val(XB1_RX,0);
}

Roman Numeral One	Ⅰ	Ⅰ	&#x2160;
Roman Numeral Two	Ⅱ	Ⅱ	&#x2161;
Roman Numeral Three	Ⅲ	Ⅲ	&#x2162;
Roman Numeral Four	Ⅳ	Ⅳ	&#x2163;
Roman Numeral Five	Ⅴ	Ⅴ	&#x2164;
Roman Numeral Six	Ⅵ	Ⅵ	&#x2165;
Roman Numeral Seven	Ⅶ	Ⅶ	&#x2166;
Roman Numeral Eight	Ⅷ	Ⅷ	&#x2167;
Roman Numeral Nine	Ⅸ	Ⅸ	&#x2168;
Roman Numeral Ten	Ⅹ	Ⅹ	&#x2169;
Roman Numeral Eleven	Ⅺ	Ⅺ	&#x216a;
Roman Numeral Twelve	Ⅻ	Ⅻ	&#x216b;


noozbar trick to return to zero

	if( event_press( XB1_DOWN ) )   {
		f_var++;
		construct = 1;
		GM_changed = TRUE;
		if( f_var > max_val ) f_var =  min_val;
		return f_var;
	}


*/

/*
              ██╗   ██╗███████╗██████╗ ███████╗ █████╗ ████████╗ ██████╗ ██╗   ██╗ ██████╗██╗  ██╗
              ██║   ██║██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔═══██╗██║   ██║██╔════╝██║  ██║
              ██║   ██║█████╗  ██████╔╝███████╗███████║   ██║   ██║   ██║██║   ██║██║     ███████║
              ╚██╗ ██╔╝██╔══╝  ██╔══██╗╚════██║██╔══██║   ██║   ██║   ██║██║   ██║██║     ██╔══██║
                ████╔╝ ███████╗██║  ██║███████║██║  ██║   ██║   ╚██████╔╝╚██████╔╝╚██████╗██║  ██║
                ╚═══╝  ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝  ╚═════╝  ╚═════╝╚═╝  ╚═╝
 ┌─────┐                                                                                                                                                  ┌─────┐
 │X-/Y-│   DEFINITIONS AND VISUAL GRID                             VERSATOUCH 6 BY TRIGGGERRR                              DEFINITIONS AND VISUAL GRID    │X+/Y-│
 └─────┘  ┌─────────────────────────────┐ ┌──────────────────────────────────┐      ┌──────────────────────────────────┐ ┌─────────────────────────────┐  └─────┘
         ┌┘                             │ │                                  │ Y-100│                                  │ │                             └─┐
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-90 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-80 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-70 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │            ZONE 1            │ │             ZONE 2               │ Y-60 │             ZONE 3               │ │           ZONE 4              │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-50 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-40 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-30 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-20 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y-10 │                                  │ │                               │
         └──────────────────────────────┘ └──────────────────────────────────┘      └──────────────────────────────────┘ └───────────────────────────────┘
         X-100  X-90   X-80   X-70   X-60   X-50   X-40   X-30   X-20   X-10   ZERO   X+10   X+20   X+30   X+40   X+50   X+60   X+70   X+80   X+90   X+100
         ┌──────────────────────────────┐ ┌──────────────────────────────────┐      ┌──────────────────────────────────┐ ┌───────────────────────────────┐
         │                              │ │                                  │ Y+10 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y+20 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y+30 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y+40 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         │            ZONE 5            │ │                                  │ Y+50 │                                  │ │           ZONE 6              │
         │                              │ │                                  │      │                                  │ │                               │
         │                              │ │                                  │ Y+60 │                                  │ │                               │
         │                              │ │                                  │      │                                  │ │                               │
         └┐                             │ │                                  │ Y+70 │                                  │ │                              ┌┘
          └┐                            │ │                                  │      │                                  │ │                             ┌┘
           └┐                           │ │                                  │ Y+80 │                                  │ │                            ┌┘
            └┐                          │ │                                  │      │                                  │ │                           ┌┘
             └┐                         │ │                                ┌─┘ Y+90 └─┐                                │ │                          ┌┘
  ┌─────┐     └┐                        │ │                              ┌─┘          └─┐                              │ │                         ┌┘    ┌─────┐
  │X-/Y+│      └┐                       │ │                             ┌┘     Y+100    └┐                             │ │                        ┌┘     │X+/Y+│
  └─────┘       └───────────────────────┘ └─────────────────────────────┘                └─────────────────────────────┘ └────────────────────────┘      └─────┘
*/

int trigLEDs, trigLEDi;
define
    DarkBlue = 0,
    MediumBlue = 1, BrightBlue = 2, DarkRed3 = 3, MediumRed = 4, BrightRed = 5, DarkGrn = 6, MediumGrn = 7, BrightGrn = 8, arkViolet = 9, MediumViolet = 10,
    BrightViolet = 11, Whi = 12, Whi2 = 13, Whi3 = 14, DarkPurp = 15, MediumPurp = 16, BrightPurp = 17, DarkYel = 18, MediumYel = 19, rightYel = 20, DarkCoral = 21,
    MediumCoral = 22, BrightCoral = 23, Aqua = 24, Blue1 = 25, Blue2 = 26, Blue3 = 27, Blue4 = 28, Cobalt = 29, RBlu2 = 30, Blu3 = 31, BRed2 = 32,
    BRed3 = 33, HotPink = 34, Pink = 35, BabyPink = 36, LightPink = 37, DarkOrange = 38, LightOrange = 39, Yellow = 40, DarkOrange1 = 41, LightOrang1 = 42, YellowGreen = 43,
    Emerald1 = 44, Emerald2 = 45, Emerald3 = 46, LEDSOff = 47;
data(
    1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 0, 1, 1, 0, 0,
    2, 2, 0, 0, 3, 3, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 2, 0, 3, 0, 3, 0, 2, 0, 3, 0, 1, 0, 2, 0, 1, 0, 3, 1, 1, 0, 2, 1, 1, 0, 3, 1, 0, 0, 2, 1, 0, 0,
    3, 2, 0, 0, 2, 3, 0, 0, 1, 3, 0, 0, 1, 2, 0, 0, 1, 3, 1, 0, 1, 2, 1, 0, 0, 3, 1, 0, 0, 2, 1, 0, 0, 3, 2, 0, 0, 2, 3, 0, 0, 1, 2, 0, 0, 1, 3, 0, 1, 1, 2, 0, 1, 1, 3, 0, 1, 0, 2, 0, 0, 0, 0, 0);

function led(f_color)
{
	for (trigLEDi = 0; trigLEDi <= 3; trigLEDi++)
	{
		set_led(trigLEDi, duint8((f_color * 4) + trigLEDi));
	}
}

/*   𝐀𝐃𝐉𝐔𝐒𝐓𝐌𝐄𝐍𝐓 𝐈𝐍𝐒𝐓𝐑𝐔𝐂𝐓𝐈𝐎𝐍𝐒
┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                          │
│     ─────────────────────────────────────────  ADJUSTING ANTI RECOIL  ─────────────────────────────────────────────────  │
│                                               ┌──────────────────────┐                                                   │
│                            ┌──────────────────┤   PRESS AND HOLD A   ├────────────────────┐                              │
│                            │                  └──────────────────────┘                    │                              │
│                                                                                                                          │
│                     ┌─────────────┐                       ┌─┐                     ┌───────────────┐                      │
│                     │PRESS DPAD UP│                       │ │                     │PRESS DPAD DOWN│                      │
│                     └─────────────┘                       │ │                     └───────────────┘                      │
│                       LED = GREEN                         │ │                          LED = PINK                        │
│                       ┌────────┐                          │ │                        ┌──────────┐                        │
│                       │VERTICAL│                          │ │                        │HORIZONTAL│                        │
│                       └────────┘                          │ │                        └──────────┘                        │
│                                                           └─┘                                                            │
│                                                                                                                          │
│ ┌───────────────────────────┐ ┌───────────────────────────┐  ┌───────────────────────────┐ ┌───────────────────────────┐ │
│ │TAP LB/L1 TO DECREASE VALUE│ │TAP RB/R1 TO INCREASE VALUE│  │   TAP LB/L1 TO MOVE LEFT  │ │  TAP RB/R1 TO MOVE RIGHT  │ │
│ └───────────────────────────┘ └───────────────────────────┘  └───────────────────────────┘ └───────────────────────────┘ │
│                                                                                                                          │
│                                LED WILL BE TURNED OFF WHEN IT IS NOT IN ADJUSTMENT MODE                                  │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                          │
│                                                ADJUSTING RAPID FIRE-                                                     │
│                                         ┌──────────────────────────────────┐                                             │
│                            ┌────────────┤ PRESS AND HOLD XB1/VIEW-PS4/SHARE├──────────────┐                              │
│                            │            └──────────────────────────────────┘              │                              │
│                        (RF_HOLD)                                                      (RF_NULL)                          │
│                            │                                                              │                              │
│                            ▼                                                              ▼                              │
│                 ┌────────────────────────┐                                  ┌─────────────────────────┐                  │
│                 │PRESS AND HOLD PS4_CROSS│                                  │PRESS AND HOLD PS4_CIRCLE│                  │
│                 └┬──────────────────────┬┘                                  └─┬──────────────────────┬┘                  │
│                  │                      │                                     │                      │                   │
│                  │                      │                                     │                      │                   │
│                  │                      │                                     │                      │                   │
│                  ▼                      ▼                                     ▼                      ▼                   │
│ ┌───────────────────────────┐ ┌───────────────────────────┐  ┌───────────────────────────┐ ┌───────────────────────────┐ │
│ │TAP LB/L1 TO DECREASE VALUE│ │TAP RB/R1 TO INCREASE VALUE│  │TAP LB/L1 TO DECREASE VALUE│ │TAP RB/R1 TO INCREASE VALUE│ │
│ └───────────────────────────┘ └───────────────────────────┘  └───────────────────────────┘ └───────────────────────────┘ │
│                                                                                                                          │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
     */

/*

                                                                                                   -100
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   -80
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   -60
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   -40
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   -20
                                                                                                    │
                                                                                                    │
                                                                                                    │
-                   -                   -                   -                   -                                       +                   +                    +                   +                   +
1 ───────────────── 8 ───────────────── 6 ───────────────── 4 ───────────────── 2 ───────────────── 0 ───────────────── 2 ───────────────── 4 ────────────────── 6 ───────────────── 8 ───────────────── 1
0                   0                   0                   0                   0                                       0                   0                    0                   0                   0
0                                                                                                   │                                                                                                    0
                                                                                                    │
                                                                                                    │
                                                                                                   +20
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   +40
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   +60
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   +80
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                    │
                                                                                                   +100

*/
